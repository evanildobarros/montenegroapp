/*! For license information please see inputmask.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[522],{4422:(e,t,n)=>{"use strict";n.r(t);var r=n(3216),l=n.n(r);window.bsCustomFileInput=l()},3216:function(e){e.exports=function(){"use strict";var e={CUSTOMFILE:'.custom-file input[type="file"]',CUSTOMFILELABEL:".custom-file-label",FORM:"form",INPUT:"input"},t=3,n=function(t){var n="",r=t.parentNode.querySelector(e.CUSTOMFILELABEL);return r&&(n=r.textContent),n},r=function(e){if(e.childNodes.length>0)for(var n=[].slice.call(e.childNodes),r=0;r<n.length;r++){var l=n[r];if(l.nodeType!==t)return l}return e},l=function(t){var n=t.bsCustomFileInput.defaultText,l=t.parentNode.querySelector(e.CUSTOMFILELABEL);l&&(r(l).textContent=n)},i=!!window.File,u="fakepath",o="\\",c=function(e){if(e.hasAttribute("multiple")&&i)return[].slice.call(e.files).map((function(e){return e.name})).join(", ");if(-1!==e.value.indexOf(u)){var t=e.value.split(o);return t[t.length-1]}return e.value};function a(){var t=this.parentNode.querySelector(e.CUSTOMFILELABEL);if(t){var n=r(t),i=c(this);i.length?n.textContent=i:l(this)}}function s(){for(var t=[].slice.call(this.querySelectorAll(e.INPUT)).filter((function(e){return!!e.bsCustomFileInput})),n=0,r=t.length;n<r;n++)l(t[n])}var f="bsCustomFileInput",v={FORMRESET:"reset",INPUTCHANGE:"change"};return{init:function(t,r){void 0===t&&(t=e.CUSTOMFILE),void 0===r&&(r=e.FORM);for(var l=[].slice.call(document.querySelectorAll(t)),i=[].slice.call(document.querySelectorAll(r)),u=0,o=l.length;u<o;u++){var c=l[u];Object.defineProperty(c,f,{value:{defaultText:n(c)},writable:!0}),a.call(c),c.addEventListener(v.INPUTCHANGE,a)}for(var d=0,p=i.length;d<p;d++)i[d].addEventListener(v.FORMRESET,s),Object.defineProperty(i[d],f,{value:!0,writable:!0})},destroy:function(){for(var t=[].slice.call(document.querySelectorAll(e.FORM)).filter((function(e){return!!e.bsCustomFileInput})),n=[].slice.call(document.querySelectorAll(e.INPUT)).filter((function(e){return!!e.bsCustomFileInput})),r=0,i=n.length;r<i;r++){var u=n[r];l(u),u[f]=void 0,u.removeEventListener(v.INPUTCHANGE,a)}for(var o=0,c=t.length;o<c;o++)t[o].removeEventListener(v.FORMRESET,s),t[o][f]=void 0}}}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,